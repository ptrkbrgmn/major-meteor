---


// The precise sequence for your statically generated page:

// 1. Request: Your browser asks the server for /users-ssg.

// 2. Instant Response: The server sends back the pre-built users-ssg/index.html file. The file already contains the full list of users and the static HTML for all the Like Buttons (e.g., <button>üëç Like 0</button>).

// 3. Initial Render: The user immediately sees the entire styled page content. It's visible but not yet interactive.

// 4. JS Fetch: The browser downloads the single, small JavaScript bundle needed for all the LikeButtonIsland components on the page.

// 5. Hydration: The JavaScript runs, finds all the static button elements, and attaches the necessary Preact functionality to each one.

// Done: The buttons are now interactive. The rest of the page (the layout, headings, user info) was never touched by this JavaScript and remains as simple, high-performance HTML. ‚úÖ

// The "islands architecture" is why Astro is so fast. You're not waiting for a large JavaScript file to load and execute just to see the page content. You get the content first, and the interactivity is added precisely where it's needed.


import MainLayout from '../layouts/MainLayout.astro';
import UserInfo from '../components/UserInfo.tsx';
import LikeButtonIsland from '../components/like-button/LikeButtonIsland.astro';

// Import the GET function from your API route
import { GET } from './api/users.ts';
import type { User } from '../types/user';

let users: User[] = [];
try {
  console.log('Calling API route function at build time...');

  // Call the function directly (no `fetch` needed)
  // The 'context' argument can often be an empty object for simple cases
  const response = await GET({} as any); 
  users = await response.json();
  
  console.log('Data processed successfully!');
} catch (err) {
  console.error('Error processing API route during build:', err);
}
---

<MainLayout title="Users List (Static)" description="A list of users generated at build time.">
  <h1>Users (SSG + API Route)</h1>
  <p>This list was generated by calling our own /api/users endpoint logic during the build.</p>
  <br />

  <ul>
    {users.map(user => (
      <li style="margin-bottom: 1rem; display: flex; align-items: center;">
        <UserInfo id={user.id} name={user.name} email={user.email} />
        <LikeButtonIsland />
      </li>
    ))}
  </ul>
</MainLayout>